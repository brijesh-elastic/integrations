---
description: Pipeline for processing Amazon Inspector Findings logs.
processors:
  - remove:
      field:
        - organization
        - division
        - team
      ignore_missing: true
      if: ctx.organization instanceof String && ctx.division instanceof String && ctx.team instanceof String
      tag: remove_agentless_tags
      description: >-
        Removes the fields added by Agentless as metadata,
        as they can collide with ECS fields.
  - set:
      field: ecs.version
      value: '8.11.0'
  - set:
      field: event.kind
      value: event
  - append:
      field: event.category
      tag: append_vulnerability_into_event_category
      value: vulnerability
  - append:
      field: event.type
      tag: append_info_into_event_type
      value: info
  - set:
      field: observer.vendor
      tag: set_observer_vendor
      value: Amazon Inspector
  - set:
      field: vulnerability.scanner.vendor
      tag: set_vulnerability_scanner_vendor
      value: Amazon Inspector
  # Remove cloud.* fields populated by beat.
  # These fields correspond to EA rather than AWS hosts and could be misleading.
  - remove:
      field: cloud
      ignore_missing: true
      description: Remove ECS cloud fields that are populated from EA metadata.
  - set:
      field: cloud.provider
      tag: set_cloud_provider
      value: aws
  - rename:
      field: message
      target_field: event.original
      ignore_missing: true
      if: 'ctx.event?.original == null'
  - remove:
      field: message
      ignore_missing: true
      if: 'ctx.event?.original != null'
      description: 'The `message` field is no longer required if the document has an `event.original` field.'
  - json:
      field: event.original
      target_field: json
      ignore_failure: true
  - fingerprint:
      fields:
        - event.original
      target_field: _id
      ignore_missing: true
  - date:
      field: json.updatedAt
      if: ctx.json?.updatedAt != null && ctx.json.updatedAt != ''
      target_field: aws.inspector.updated_at
      formats:
        - ISO8601
        - UNIX
        - yyyy-MM-dd'T'HH:mm:ss.SSS'Z'
      on_failure:
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - set:
      field: '@timestamp'
      copy_from: aws.inspector.updated_at
      ignore_failure: true
  - rename:
      field: json.description
      target_field: aws.inspector.description
      ignore_missing: true
  - set:
      field: message
      copy_from: aws.inspector.description
      ignore_failure: true
  - set:
      field: vulnerability.description
      tag: set_vulnerability_description
      copy_from: aws.inspector.description
      ignore_empty_value: true
  - rename:
      field: json.awsAccountId
      target_field: aws.inspector.aws_account_id
      ignore_missing: true
  - set:
      field: cloud.account.id
      copy_from: aws.inspector.aws_account_id
      ignore_failure: true
  - rename:
      field: json.severity
      target_field: aws.inspector.severity
      ignore_missing: true
  - script:
      description: Map vulnerability.severity to CVSS standard
      tag: script_to_map_severity_to_CVSS
      lang: painless
      if: ctx.aws?.inspector?.severity != null
      source: >
        String severity = ctx.aws.inspector.severity.toLowerCase();
        if (severity == 'untriaged') {
          ctx.vulnerability.put('severity', 'Unknown');
        } else if (severity == 'informational') {
          ctx.vulnerability.put('severity', 'Low');
        } else if (severity == 'low') {
          ctx.vulnerability.put('severity', 'Low');
        } else if (severity == 'medium') {
          ctx.vulnerability.put('severity', 'Medium');
        } else if (severity == 'high') {
          ctx.vulnerability.put('severity', 'High');
        } else if (severity == 'critical') {
          ctx.vulnerability.put('severity', 'Critical');
        }
      on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - rename:
      field: json.networkReachabilityDetails.protocol
      target_field: aws.inspector.network_reachability_details.protocol
      ignore_missing: true
  - set:
      field: network.transport
      copy_from: aws.inspector.network_reachability_details.protocol
      ignore_failure: true
  - lowercase:
      field: network.transport
      ignore_missing: true
  - rename:
      field: json.codeVulnerabilityDetails.cwes
      target_field: aws.inspector.code_vulnerability_details.cwes
      ignore_missing: true
  - rename:
      field: json.codeVulnerabilityDetails.detectorId
      target_field: aws.inspector.code_vulnerability_details.detector_id
      ignore_missing: true
  - rename:
      field: json.codeVulnerabilityDetails.detectorName
      target_field: aws.inspector.code_vulnerability_details.detector_name
      ignore_missing: true
  - rename:
      field: json.codeVulnerabilityDetails.detectorTags
      target_field: aws.inspector.code_vulnerability_details.detector_tags
      ignore_missing: true
  - convert:
      field: json.codeVulnerabilityDetails.filePath.endLine
      type: long
      target_field: aws.inspector.code_vulnerability_details.file_path.end_line
      ignore_missing: true
      on_failure:
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - rename:
      field: json.codeVulnerabilityDetails.filePath.fileName
      target_field: aws.inspector.code_vulnerability_details.file_path.name
      ignore_missing: true
  - rename:
      field: json.codeVulnerabilityDetails.filePath.filePath
      target_field: aws.inspector.code_vulnerability_details.file_path.path
      ignore_missing: true
  - convert:
      field: json.codeVulnerabilityDetails.filePath.startLine
      type: long
      target_field: aws.inspector.code_vulnerability_details.file_path.start_line
      ignore_missing: true
      on_failure:
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - rename:
      field: json.codeVulnerabilityDetails.referenceUrls
      target_field: aws.inspector.code_vulnerability_details.reference_urls
      ignore_missing: true
  - rename:
      field: json.codeVulnerabilityDetails.ruleId
      target_field: aws.inspector.code_vulnerability_details.rule_id
      ignore_missing: true
  - rename:
      field: json.codeVulnerabilityDetails.sourceLambdaLayerArn
      target_field: aws.inspector.code_vulnerability_details.source_lambda_layer_arn
      ignore_missing: true
  - convert:
      field: json.epss.score
      type: double
      target_field: aws.inspector.epss.score
      ignore_missing: true
      on_failure:
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - date:
      field: json.exploitabilityDetails.lastKnownExploitAt
      if: ctx.json?.exploitabilityDetails?.lastKnownExploitAt != null && ctx.json.exploitabilityDetails.lastKnownExploitAt != ''
      target_field: aws.inspector.exploitability_details.last_known_exploit_at
      formats:
        - ISO8601
        - UNIX
        - yyyy-MM-dd'T'HH:mm:ss.SSS'Z'
      on_failure:
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - rename:
      field: json.exploitAvailable
      target_field: aws.inspector.exploit_available
      ignore_missing: true
  - rename:
      field: json.packageVulnerabilityDetails.referenceUrls
      target_field: aws.inspector.package_vulnerability_details.reference_urls
      ignore_missing: true
  - set:
      field: vulnerability.reference
      copy_from: aws.inspector.package_vulnerability_details.reference_urls
      ignore_failure: true
  - rename:
      field: json.packageVulnerabilityDetails.vulnerabilityId
      target_field: aws.inspector.package_vulnerability_details.vulnerability_id
      ignore_missing: true
  - set:
      field: vulnerability.id
      copy_from: aws.inspector.package_vulnerability_details.vulnerability_id
      ignore_failure: true
  - set:
      field: vulnerability.cve
      tag: set_vulnerability_cve
      copy_from: aws.inspector.package_vulnerability_details.vulnerability_id
      ignore_empty_value: true
      if: ctx.aws?.inspector?.type == 'PACKAGE_VULNERABILITY' && ctx.aws?.inspector?.package_vulnerability_details?.vulnerability_id?.startsWith('CVE') == true
  - set:
      field: vulnerability.enumeration
      tag: set_vulnerability_enumeration
      value: CVE
      if: ctx.vulnerability?.cve != null
  - rename:
      field: json.findingArn
      target_field: aws.inspector.finding_arn
      ignore_missing: true
  - date:
      field: json.firstObservedAt
      if: ctx.json?.firstObservedAt != null && ctx.json.firstObservedAt != ''
      target_field: aws.inspector.first_observed_at
      formats:
        - ISO8601
        - UNIX
        - yyyy-MM-dd'T'HH:mm:ss.SSS'Z'
      on_failure:
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - rename:
      field: json.fixAvailable
      target_field: aws.inspector.fix_available
      ignore_missing: true
  - convert:
      field: json.inspectorScore
      type: double
      target_field: aws.inspector.inspector_score
      ignore_missing: true
      on_failure:
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - rename:
      field: json.inspectorScoreDetails.adjustedCvss.adjustments
      target_field: aws.inspector.inspector_score_details.adjusted_cvss.adjustments
      ignore_missing: true
  - rename:
      field: json.inspectorScoreDetails.adjustedCvss.cvssSource
      target_field: aws.inspector.inspector_score_details.adjusted_cvss.cvss_source
      ignore_missing: true
  - convert:
      field: json.inspectorScoreDetails.adjustedCvss.score
      type: double
      target_field: aws.inspector.inspector_score_details.adjusted_cvss.score.value
      ignore_missing: true
      on_failure:
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - set:
      field: vulnerability.score.base
      tag: set_vulnerability_score_base
      copy_from: aws.inspector.inspector_score_details.adjusted_cvss.score.value
      ignore_empty_value: true
  - set:
      field: vulnerability.classification
      tag: set_vulnerability_classification
      value: CVSS
      if: ctx.aws?.inspector?.type == 'PACKAGE_VULNERABILITY' && ctx.aws?.inspector?.inspector_score_details?.adjusted_cvss?.score?.value != null
  - rename:
      field: json.inspectorScoreDetails.adjustedCvss.scoreSource
      target_field: aws.inspector.inspector_score_details.adjusted_cvss.score.source
      ignore_missing: true
  - rename:
      field: json.inspectorScoreDetails.adjustedCvss.scoringVector
      target_field: aws.inspector.inspector_score_details.adjusted_cvss.scoring_vector
      ignore_missing: true
  - rename:
      field: json.inspectorScoreDetails.adjustedCvss.version
      target_field: aws.inspector.inspector_score_details.adjusted_cvss.version
      ignore_missing: true
  - set:
      field: vulnerability.score.version
      tag: set_vulnerability_score_version
      copy_from: aws.inspector.inspector_score_details.adjusted_cvss.version
      ignore_empty_value: true
  - date:
      field: json.lastObservedAt
      if: ctx.json?.lastObservedAt != null && ctx.json.lastObservedAt != ''
      target_field: aws.inspector.last_observed_at
      formats:
        - ISO8601
        - UNIX
        - yyyy-MM-dd'T'HH:mm:ss.SSS'Z'
      on_failure:
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - foreach:
      field: json.networkReachabilityDetails.networkPath.steps
      if: ctx.json?.networkReachabilityDetails?.networkPath?.steps instanceof List
      ignore_failure: true
      processor:
        rename:
          field: _ingest._value.componentId
          target_field: _ingest._value.component.id
          ignore_missing: true
  - foreach:
      field: json.networkReachabilityDetails.networkPath.steps
      if: ctx.json?.networkReachabilityDetails?.networkPath?.steps instanceof List
      ignore_failure: true
      processor:
        rename:
          field: _ingest._value.componentType
          target_field: _ingest._value.component.type
          ignore_missing: true
  - foreach:
      field: json.networkReachabilityDetails.networkPath.steps
      if: ctx.json?.networkReachabilityDetails?.networkPath?.steps instanceof List
      ignore_failure: true
      processor:
        rename:
          field: _ingest._value.componentArn
          target_field: _ingest._value.component.arn
          ignore_missing: true
  - rename:
      field: json.networkReachabilityDetails.networkPath.steps
      target_field: aws.inspector.network_reachability_details.network_path.steps
      ignore_missing: true
  - convert:
      field: json.networkReachabilityDetails.openPortRange.begin
      type: long
      target_field: aws.inspector.network_reachability_details.open_port_range.begin
      ignore_missing: true
      on_failure:
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - convert:
      field: json.networkReachabilityDetails.openPortRange.end
      type: long
      target_field: aws.inspector.network_reachability_details.open_port_range.end
      ignore_missing: true
      on_failure:
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - foreach:
      field: json.packageVulnerabilityDetails.cvss
      if: ctx.json?.packageVulnerabilityDetails?.cvss instanceof List
      ignore_failure: true
      processor:
        convert:
          field: _ingest._value.baseScore
          type: double
          target_field: _ingest._value.base_score
          ignore_missing: true
          on_failure:
            - remove:
                field: _ingest._value.baseScore
                ignore_missing: true
            - append:
                field: error.message
                value: '{{{_ingest.on_failure_message}}}'
  - foreach:
      field: json.packageVulnerabilityDetails.cvss
      if: ctx.json?.packageVulnerabilityDetails?.cvss instanceof List
      ignore_failure: true
      processor:
        remove:
          field: _ingest._value.baseScore
          ignore_missing: true
  - foreach:
      field: json.packageVulnerabilityDetails.cvss
      if: ctx.json?.packageVulnerabilityDetails?.cvss instanceof List
      ignore_failure: true
      processor:
        rename:
          field: _ingest._value.scoringVector
          target_field: _ingest._value.scoring_vector
          ignore_missing: true
  - rename:
      field: json.packageVulnerabilityDetails.cvss
      target_field: aws.inspector.package_vulnerability_details.cvss
      ignore_missing: true
  - rename:
      field: json.networkReachabilityDetails.networkPath.steps
      target_field: aws.inspector.network_reachability_details.network_path.steps
      ignore_missing: true
  - rename:
      field: json.packageVulnerabilityDetails.relatedVulnerabilities
      target_field: aws.inspector.package_vulnerability_details.related_vulnerabilities
      ignore_missing: true
  - rename:
      field: json.packageVulnerabilityDetails.source
      target_field: aws.inspector.package_vulnerability_details.source.value
      ignore_missing: true
  - uri_parts:
      field: json.packageVulnerabilityDetails.sourceUrl
      target_field: aws.inspector.package_vulnerability_details.source.url
      if: ctx.json?.packageVulnerabilityDetails?.sourceUrl != null
      keep_original: true
      on_failure:
        - remove:
            field: json.packageVulnerabilityDetails.sourceUrl
            ignore_missing: true
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - date:
      field: json.packageVulnerabilityDetails.vendorCreatedAt
      if: ctx.json?.packageVulnerabilityDetails?.vendorCreatedAt != null && ctx.json.packageVulnerabilityDetails.vendorCreatedAt != ''
      target_field: aws.inspector.package_vulnerability_details.vendor.created_at
      formats:
        - ISO8601
        - UNIX
        - yyyy-MM-dd'T'HH:mm:ss.SSS'Z'
      on_failure:
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - set:
      field: vulnerability.published_date
      tag: set_vulnerability_published_date
      copy_from: aws.inspector.package_vulnerability_details.vendor.created_at
      ignore_empty_value: true
  - rename:
      field: json.packageVulnerabilityDetails.vendorSeverity
      target_field: aws.inspector.package_vulnerability_details.vendor.severity
      ignore_missing: true
  - date:
      field: json.packageVulnerabilityDetails.vendorUpdatedAt
      if: ctx.json?.packageVulnerabilityDetails?.vendorUpdatedAt!= null && ctx.json.packageVulnerabilityDetails.vendorUpdatedAt != ''
      target_field: aws.inspector.package_vulnerability_details.vendor.updated_at
      formats:
        - ISO8601
        - UNIX
        - yyyy-MM-dd'T'HH:mm:ss.SSS'Z'
      on_failure:
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - foreach:
      field: json.packageVulnerabilityDetails.vulnerablePackages
      if: ctx.json?.packageVulnerabilityDetails?.vulnerablePackages instanceof List
      ignore_failure: true
      processor:
        rename:
          field: _ingest._value.filePath
          target_field: _ingest._value.file_path
          ignore_missing: true
  - foreach:
      field: json.packageVulnerabilityDetails.vulnerablePackages
      if: ctx.json?.packageVulnerabilityDetails?.vulnerablePackages instanceof List
      ignore_failure: true
      processor:
        rename:
          field: _ingest._value.fixedInVersion
          target_field: _ingest._value.fixed_in_version
          ignore_missing: true
  - foreach:
      field: json.packageVulnerabilityDetails.vulnerablePackages
      if: ctx.json?.packageVulnerabilityDetails?.vulnerablePackages instanceof List
      ignore_failure: true
      processor:
        rename:
          field: _ingest._value.packageManager
          target_field: _ingest._value.package_manager
          ignore_missing: true
  - foreach:
      field: json.packageVulnerabilityDetails.vulnerablePackages
      if: ctx.json?.packageVulnerabilityDetails?.vulnerablePackages instanceof List
      ignore_failure: true
      processor:
        rename:
          field: _ingest._value.sourceLambdaLayerArn
          target_field: _ingest._value.source_lambda_layer_arn
          ignore_missing: true
  - foreach:
      field: json.packageVulnerabilityDetails.vulnerablePackages
      if: ctx.json?.packageVulnerabilityDetails?.vulnerablePackages instanceof List
      ignore_failure: true
      processor:
        rename:
          field: _ingest._value.sourceLayerHash
          target_field: _ingest._value.source_layer_hash
          ignore_missing: true
  - foreach:
      field: json.packageVulnerabilityDetails.vulnerablePackages
      if: ctx.json?.packageVulnerabilityDetails?.vulnerablePackages instanceof List
      ignore_failure: true
      processor:
        append:
          field: related.hash
          value: '{{{_ingest._value.source_layer_hash}}}'
          allow_duplicates: false
          ignore_failure: true
  - rename:
      field: json.packageVulnerabilityDetails.vulnerablePackages
      target_field: aws.inspector.package_vulnerability_details.vulnerable_packages
      ignore_missing: true
  - foreach:
      field: aws.inspector.package_vulnerability_details.vulnerable_packages
      if: ctx.aws?.inspector?.package_vulnerability_details?.vulnerable_packages instanceof List
      processor:
        append:
          field: package.architecture
          tag: append_package_vulnerability_details_vulnerable_packages_arch_into_package_architecture
          value: '{{{_ingest._value.arch}}}'
          allow_duplicates: false
  - foreach:
      field: aws.inspector.package_vulnerability_details.vulnerable_packages
      if: ctx.aws?.inspector?.package_vulnerability_details?.vulnerable_packages instanceof List
      processor:
        append:
          field: package.name
          tag: append_package_vulnerability_details_vulnerable_packages_name_into_package_name
          value: '{{{_ingest._value.name}}}'
          allow_duplicates: false
  - foreach:
      field: aws.inspector.package_vulnerability_details.vulnerable_packages
      if: ctx.aws?.inspector?.package_vulnerability_details?.vulnerable_packages instanceof List
      processor:
        append:
          field: package.version
          tag: append_package_vulnerability_details_vulnerable_packages_version_into_package_version
          value: '{{{_ingest._value.version}}}'
          allow_duplicates: false
  - foreach:
      field: aws.inspector.package_vulnerability_details.vulnerable_packages
      if: ctx.aws?.inspector?.package_vulnerability_details?.vulnerable_packages instanceof List
      processor:
        append:
          field: package.path
          tag: append_package_vulnerability_details_vulnerable_packages_file_path_into_package_path
          value: '{{{_ingest._value.file_path}}}'
          allow_duplicates: false
  - foreach:
      field: aws.inspector.package_vulnerability_details.vulnerable_packages
      if: ctx.aws?.inspector?.package_vulnerability_details?.vulnerable_packages instanceof List
      processor:
        append:
          field: package.fixed_version
          tag: append_package_vulnerability_details_vulnerable_packages_fixed_in_version_into_package_fixed_version
          value: '{{{_ingest._value.fixed_in_version}}}'
          allow_duplicates: false
  - rename:
      field: json.remediation.recommendation.text
      target_field: aws.inspector.remediation.recommendation.text
      ignore_missing: true
  - uri_parts:
      field: json.remediation.recommendation.Url
      target_field: aws.inspector.remediation.recommendation.url
      if: ctx.json?.remediation?.recommendation?.Url != null
      keep_original: true
      on_failure:
        - remove:
            field: json.remediation.recommendation.Url
            ignore_missing: true
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - foreach:
      field: json.resources
      if: ctx.json?.resources instanceof List
      ignore_failure: true
      processor:
        rename:
          field: _ingest._value.details.awsEc2Instance.iamInstanceProfileArn
          target_field: _ingest._value.details.aws.ec2_instance.iam_instance_profile_arn
          ignore_missing: true
  - foreach:
      field: json.resources
      if: ctx.json?.resources instanceof List
      ignore_failure: true
      processor:
        rename:
          field: _ingest._value.details.awsEc2Instance.imageId
          target_field: _ingest._value.details.aws.ec2_instance.image_id
          ignore_missing: true
  - foreach:
      field: json.resources
      if: ctx.json?.resources instanceof List
      ignore_failure: true
      processor:
        rename:
          field: _ingest._value.details.awsEc2Instance.ipV4Addresses
          target_field: _ingest._value.details.aws.ec2_instance.ipv4_addresses
          ignore_missing: true
  - foreach:
      field: json.resources
      if: ctx.json?.resources instanceof List
      ignore_failure: true
      processor:
        foreach:
          field: _ingest._value.details.aws.ec2_instance.ipv4_addresses
          ignore_failure: true
          processor:
            convert:
              field: _ingest._value
              target_field: _ingest._value
              type: ip
              ignore_failure: true
  - foreach:
      field: json.resources
      if: ctx.json?.resources instanceof List
      ignore_failure: true
      processor:
        foreach:
          field: _ingest._value.details.aws.ec2_instance.ipv4_addresses
          ignore_failure: true
          processor:
            append:
              field: related.ip
              value: '{{{_ingest._value}}}'
              allow_duplicates: false
              ignore_failure: true
  - foreach:
      field: json.resources
      if: ctx.json?.resources instanceof List
      ignore_failure: true
      processor:
        rename:
          field: _ingest._value.details.awsEc2Instance.ipV6Addresses
          target_field: _ingest._value.details.aws.ec2_instance.ipv6_addresses
          ignore_missing: true
  - foreach:
      field: json.resources
      if: ctx.json?.resources instanceof List
      ignore_failure: true
      processor:
        foreach:
          field: _ingest._value.details.aws.ec2_instance.ipv6_addresses
          ignore_failure: true
          processor:
            convert:
              field: _ingest._value
              target_field: _ingest._value
              type: ip
              ignore_failure: true
  - foreach:
      field: json.resources
      if: ctx.json?.resources instanceof List
      ignore_failure: true
      processor:
        foreach:
          field: _ingest._value.details.aws.ec2_instance.ipv6_addresses
          ignore_failure: true
          processor:
            append:
              field: related.ip
              value: '{{{_ingest._value}}}'
              allow_duplicates: false
              ignore_failure: true
  - foreach:
      field: json.resources
      if: ctx.json?.resources instanceof List
      ignore_failure: true
      processor:
        rename:
          field: _ingest._value.details.awsEc2Instance.keyName
          target_field: _ingest._value.details.aws.ec2_instance.key_name
          ignore_missing: true
  - foreach:
      field: json.resources
      if: ctx.json?.resources instanceof List
      ignore_failure: true
      processor:
        date:
          field: _ingest._value.details.awsEc2Instance.launchedAt
          target_field: _ingest._value.details.aws.ec2_instance.launched_at
          formats:
            - ISO8601
            - UNIX
            - yyyy-MM-dd'T'HH:mm:ss.SSS'Z'
          ignore_failure: true
  - foreach:
      field: json.resources
      if: ctx.json?.resources instanceof List
      ignore_failure: true
      processor:
        remove:
          field:
            - _ingest._value.details.awsEc2Instance.launchedAt
          ignore_missing: true
  - foreach:
      field: json.resources
      if: ctx.json?.resources instanceof List
      ignore_failure: true
      processor:
        rename:
          field: _ingest._value.details.awsEc2Instance.platform
          target_field: _ingest._value.details.aws.ec2_instance.platform
          ignore_missing: true
  - foreach:
      field: json.resources
      if: ctx.json?.resources instanceof List
      ignore_failure: true
      processor:
        rename:
          field: _ingest._value.details.awsEc2Instance.subnetId
          target_field: _ingest._value.details.aws.ec2_instance.subnet_id
          ignore_missing: true
  - foreach:
      field: json.resources
      if: ctx.json?.resources instanceof List
      ignore_failure: true
      processor:
        rename:
          field: _ingest._value.details.awsEc2Instance.type
          target_field: _ingest._value.details.aws.ec2_instance.type
          ignore_missing: true
  - foreach:
      field: json.resources
      if: ctx.json?.resources instanceof List
      ignore_failure: true
      processor:
        rename:
          field: _ingest._value.details.awsEc2Instance.vpcId
          target_field: _ingest._value.details.aws.ec2_instance.vpc_id
          ignore_missing: true
  - foreach:
      field: json.resources
      if: ctx.json?.resources instanceof List
      ignore_failure: true
      processor:
        rename:
          field: _ingest._value.details.awsEcrContainerImage.architecture
          target_field: _ingest._value.details.aws.ecr_container_image.architecture
          ignore_missing: true
  - foreach:
      field: json.resources
      if: ctx.json?.resources instanceof List
      ignore_failure: true
      processor:
        rename:
          field: _ingest._value.details.awsEcrContainerImage.author
          target_field: _ingest._value.details.aws.ecr_container_image.author
          ignore_missing: true
  - foreach:
      field: json.resources
      if: ctx.json?.resources instanceof List
      ignore_failure: true
      processor:
        rename:
          field: _ingest._value.details.awsEcrContainerImage.imageHash
          target_field: _ingest._value.details.aws.ecr_container_image.image.hash
          ignore_missing: true
  - foreach:
      field: json.resources
      if: ctx.json?.resources instanceof List
      ignore_failure: true
      processor:
        append:
          field: related.hash
          value: '{{{_ingest._value.details.aws.ecr_container_image.image.hash}}}'
          allow_duplicates: false
          ignore_failure: true
  - foreach:
      field: json.resources
      if: ctx.json?.resources instanceof List
      ignore_failure: true
      processor:
        rename:
          field: _ingest._value.details.awsEcrContainerImage.imageTags
          target_field: _ingest._value.details.aws.ecr_container_image.image.tags
          ignore_missing: true
  - foreach:
      field: json.resources
      if: ctx.json?.resources instanceof List
      ignore_failure: true
      processor:
        convert:
          field: _ingest._value.details.awsEcrContainerImage.inUseCount
          type: long
          target_field: _ingest._value.details.aws.ecr_container_image.in_use_count
          ignore_missing: true
          on_failure:
            - remove:
                field: _ingest._value.details.awsEcrContainerImage.inUseCount
                ignore_missing: true
            - append:
                field: error.message
                value: '{{{_ingest.on_failure_message}}}'
  - foreach:
      field: json.resources
      if: ctx.json?.resources instanceof List
      ignore_failure: true
      processor:
        date:
          field: _ingest._value.details.awsEcrContainerImage.lastInUseAt
          target_field: _ingest._value.details.aws.ecr_container_image.last_in_use_at
          formats:
            - ISO8601
            - UNIX
            - yyyy-MM-dd'T'HH:mm:ss.SSS'Z'
          ignore_failure: true
  - foreach:
      field: json.resources
      if: ctx.json?.resources instanceof List
      ignore_failure: true
      processor:
        rename:
          field: _ingest._value.details.awsEcrContainerImage.platform
          target_field: _ingest._value.details.aws.ecr_container_image.platform
          ignore_missing: true
  - foreach:
      field: json.resources
      if: ctx.json?.resources instanceof List
      ignore_failure: true
      processor:
        date:
          field: _ingest._value.details.awsEcrContainerImage.pushedAt
          target_field: _ingest._value.details.aws.ecr_container_image.pushed_at
          formats:
            - ISO8601
            - UNIX
            - yyyy-MM-dd'T'HH:mm:ss.SSS'Z'
          ignore_failure: true
  - foreach:
      field: json.resources
      if: ctx.json?.resources instanceof List
      ignore_failure: true
      processor:
        remove:
          field:
            - _ingest._value.details.awsEcrContainerImage.inUseCount
            - _ingest._value.details.awsEcrContainerImage.lastInUseAt
            - _ingest._value.details.awsEcrContainerImage.pushedAt
          ignore_missing: true
  - foreach:
      field: json.resources
      if: ctx.json?.resources instanceof List
      ignore_failure: true
      processor:
        rename:
          field: _ingest._value.details.awsEcrContainerImage.registry
          target_field: _ingest._value.details.aws.ecr_container_image.registry
          ignore_missing: true
  - foreach:
      field: json.resources
      if: ctx.json?.resources instanceof List
      ignore_failure: true
      processor:
        rename:
          field: _ingest._value.details.awsEcrContainerImage.repositoryName
          target_field: _ingest._value.details.aws.ecr_container_image.repository_name
          ignore_missing: true
  - foreach:
      field: json.resources
      if: ctx.json?.resources instanceof List
      ignore_failure: true
      processor:
        rename:
          field: _ingest._value.details.awsLambdaFunction.codeSha256
          target_field: _ingest._value.details.awsLambdaFunction.code_sha256
          ignore_missing: true
  - foreach:
      field: json.resources
      if: ctx.json?.resources instanceof List
      ignore_failure: true
      processor:
        append:
          field: related.hash
          value: '{{{_ingest._value.details.awsLambdaFunction.code_sha256}}}'
          allow_duplicates: false
          ignore_failure: true
  - foreach:
      field: json.resources
      if: ctx.json?.resources instanceof List
      ignore_failure: true
      processor:
        rename:
          field: _ingest._value.details.awsLambdaFunction.executionRoleArn
          target_field: _ingest._value.details.awsLambdaFunction.execution_role_arn
          ignore_missing: true
  - foreach:
      field: json.resources
      if: ctx.json?.resources instanceof List
      ignore_failure: true
      processor:
        rename:
          field: _ingest._value.details.awsLambdaFunction.functionName
          target_field: _ingest._value.details.awsLambdaFunction.function_name
          ignore_missing: true
  - foreach:
      field: json.resources
      if: ctx.json?.resources instanceof List
      ignore_failure: true
      processor:
        date:
          field: _ingest._value.details.awsLambdaFunction.lastModifiedAt
          target_field: _ingest._value.details.awsLambdaFunction.last_modified_at
          formats:
            - ISO8601
            - UNIX
            - yyyy-MM-dd'T'HH:mm:ss.SSS'Z'
          ignore_failure: true
  - foreach:
      field: json.resources
      if: ctx.json?.resources instanceof List
      ignore_failure: true
      processor:
        rename:
          field: _ingest._value.details.awsLambdaFunction.packageType
          target_field: _ingest._value.details.awsLambdaFunction.package_type
          ignore_missing: true
  - foreach:
      field: json.resources
      if: ctx.json?.resources instanceof List
      ignore_failure: true
      processor:
        rename:
          field: _ingest._value.details.awsLambdaFunction.vpcConfig.securityGroupIds
          target_field: _ingest._value.details.awsLambdaFunction.vpc_config.security_group_ids
          ignore_missing: true
  - foreach:
      field: json.resources
      if: ctx.json?.resources instanceof List
      ignore_failure: true
      processor:
        rename:
          field: _ingest._value.details.awsLambdaFunction.vpcConfig.subnetIds
          target_field: _ingest._value.details.awsLambdaFunction.vpc_config.subnet_ids
          ignore_missing: true
  - foreach:
      field: json.resources
      if: ctx.json?.resources instanceof List
      ignore_failure: true
      processor:
        rename:
          field: _ingest._value.details.awsLambdaFunction.vpcConfig.vpcId
          target_field: _ingest._value.details.awsLambdaFunction.vpc_config.vpc_id
          ignore_missing: true
  - foreach:
      field: json.resources
      if: ctx.json?.resources instanceof List
      ignore_failure: true
      processor:
        remove:
          field:
            - _ingest._value.details.awsLambdaFunction.lastModifiedAt
          ignore_missing: true
  - foreach:
      field: json.resources
      if: ctx.json?.resources instanceof List
      ignore_failure: true
      processor:
        rename:
          field: _ingest._value.details.awsLambdaFunction
          target_field: _ingest._value.details.aws.lambda_function
          ignore_missing: true
  - foreach:
      field: json.resources
      if: ctx.json?.resources instanceof List
      ignore_failure: true
      processor:
        rename:
          field: _ingest._value.details.codeRepository.integrationArn
          target_field: _ingest._value.details.code_repository.integration_arn
          ignore_missing: true
  - foreach:
      field: json.resources
      if: ctx.json?.resources instanceof List
      ignore_failure: true
      processor:
        rename:
          field: _ingest._value.details.codeRepository.projectName
          target_field: _ingest._value.details.code_repository.project_name
          ignore_missing: true
  - foreach:
      field: json.resources
      if: ctx.json?.resources instanceof List
      ignore_failure: true
      processor:
        rename:
          field: _ingest._value.details.codeRepository.providerType
          target_field: _ingest._value.details.code_repository.provider_type
          ignore_missing: true
  - rename:
      field: json.resources
      target_field: aws.inspector.resources
      ignore_missing: true
  - script:
      description: Extract fields from aws.inspector.resources with single resource.
      tag: script_extract_fields_from_single_resource
      lang: painless
      if: ctx.aws?.inspector?.resources instanceof List && ctx.aws.inspector.resources.size() == 1
      source: |-
        // Arrays won't work in general in current UI of Cloud Security Posture workflow. In Amazon Inspector, a finding may contain multiple resources, but rarely.
        // When a finding has single-resource, we extract fields as single-value so that the Vulnerability Findings UI behaves as expected for almost all cases.
        // But in the rare multi-resource case, we extract fields into an array to not miss any affected resources for a finding. 
        // This trade-off is okay as not many findings will be affected. When our UI natively supports multi-resources, the single-value resource extraction must be removed.
        
        def resources = ctx.aws.inspector.resources;

        // Define fields to be extracted.
        ctx.resource = ctx.resource ?: [:];
        ctx.host = ctx.host ?: [:];
        ctx.host.os = ctx.host.os ?: [:];
        ctx.host.ip = ctx.host.ip ?: [];
        ctx.cloud = ctx.cloud ?: [:];
        ctx.cloud.instance = ctx.cloud.instance ?: [:];
        ctx.cloud.machine = ctx.cloud.machine ?: [:];

        // This extraction logic is only for single resource case. Multiple resources are extracted inside script - script_extract_fields_from_multiple_resources.
        if (resources.size() == 1){
          def res = resources[0];

          if (res.type == 'AWS_EC2_INSTANCE') {
            ctx.resource.id = res.id;
            ctx.resource.name = res.tags.Name;
            ctx.cloud.instance.id = res.id;
            ctx.cloud.region = res.region;
            ctx.cloud.machine.type = res.details.aws.ec2_instance.type;
            ctx.host.id = res.id;
            ctx.host.name = res.tags.Name;
            ctx.host.type = res.details.aws.ec2_instance.type;
            ctx.host.os.platform = res.details.aws.ec2_instance.platform;
            for (ipv4 in res.details.aws.ec2_instance.ipv4_addresses) {
              ctx.host.ip.add(ipv4);
            }
            for (ipv6 in res.details.aws.ec2_instance.ipv6_addresses) {
              ctx.host.ip.add(ipv6);
            }
            def platform = res.details.aws.ec2_instance.platform.toLowerCase();
            if (platform.contains('windows')) {
              ctx.host.os.type = 'windows';
            } else if (platform.contains('linux')) {
              ctx.host.os.type = 'linux';
            } else if (platform.contains('macos')) {
              ctx.host.os.type = 'macos';
            }
          }
        }
      on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - script:
      description: Extract fields from aws.inspector.resources with multiple resources.
      tag: script_extract_fields_from_multiple_resources
      lang: painless
      if: ctx.aws?.inspector?.resources instanceof List && ctx.aws.inspector.resources.size() > 1
      source: |-
        def resources = ctx.aws.inspector.resources;

        // Define fields to be extracted.
        ctx.resource = ctx.resource ?: [:];
        ctx.resource.id = ctx.resource.id ?: [];
        ctx.resource.name = ctx.resource.name ?: [];

        ctx.host = ctx.host ?: [:];
        ctx.host.id = ctx.host.id ?: [];
        ctx.host.name = ctx.host.name ?: [];
        ctx.host.ip = ctx.host.ip ?: [];
        ctx.host.type = ctx.host.type ?: [];
        ctx.host.os = ctx.host.os ?: [:];
        ctx.host.os.platform = ctx.host.os.platform ?: [];
        ctx.host.os.type = ctx.host.os.type ?: [];

        ctx.cloud = ctx.cloud ?: [:];
        ctx.cloud.instance = ctx.cloud.instance ?: [:];
        ctx.cloud.instance.id = ctx.cloud.instance.id ?: [];
        ctx.cloud.machine = ctx.cloud.machine ?: [:];
        ctx.cloud.machine.type = ctx.cloud.machine.type ?: [];
        ctx.cloud.region = ctx.cloud.region ?: [];

        for (res in resources) {
          if (res.type == 'AWS_EC2_INSTANCE') {
            ctx.resource.id.add(res.id);
            ctx.resource.name.add(res.tags.Name);
            ctx.cloud.instance.id.add(res.id);
            ctx.cloud.region.add(res.region);
            ctx.cloud.machine.type.add(res.details.aws.ec2_instance.type);
            ctx.host.id.add(res.id);
            ctx.host.name.add(res.tags.Name);
            ctx.host.type.add(res.details.aws.ec2_instance.type);
            ctx.host.os.platform.add(res.details.aws.ec2_instance.platform);
            for (ipv4 in res.details.aws.ec2_instance.ipv4_addresses) {
              ctx.host.ip.add(ipv4);
            }
            for (ipv6 in res.details.aws.ec2_instance.ipv6_addresses) {
              ctx.host.ip.add(ipv6);
            }
            def platform = res.details.aws.ec2_instance.platform.toLowerCase();
            if (platform.contains('windows')) {
              ctx.host.os.type = 'windows';
            } else if (platform.contains('linux')) {
              ctx.host.os.type = 'linux';
            } else if (platform.contains('macos')) {
              ctx.host.os.type = 'macos';
            }
          }
        }
      on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - rename:
      field: json.status
      target_field: aws.inspector.status
      ignore_missing: true
  - rename:
      field: json.title
      target_field: aws.inspector.title
      ignore_missing: true
  - set:
      field: vulnerability.title
      tag: set_vulnerability_title
      copy_from: aws.inspector.title
      ignore_empty_value: true
  - rename:
      field: json.type
      target_field: aws.inspector.type
      ignore_missing: true
  - set:
      field: event.id
      tag: set_event_id
      value: '{{vulnerability.id}}|{{resource.id}}|{{package.name}}|{{package.version}}|{{@timestamp}}'
      if: ctx.aws?.inspector?.type == 'PACKAGE_VULNERABILITY'
  - set:
      field: aws.inspector.transform_unique_id
      tag: set_transform_unique_id
      value: '{{vulnerability.id}}|{{resource.id}}|{{package.name}}|{{package.version}}'
      if: ctx.aws?.inspector?.type == 'PACKAGE_VULNERABILITY'
  - remove:
      field:
        - json
      ignore_missing: true
  - remove:
      if: ctx.tags == null || !(ctx.tags.contains('preserve_duplicate_custom_fields'))
      field:
        - aws.inspector.description
        - aws.inspector.updated_at
        - aws.inspector.aws_account_id
        - aws.inspector.network_reachability_details.protocol
        - aws.inspector.package_vulnerability_details.reference_urls
        - aws.inspector.package_vulnerability_details.vulnerability_id
        - aws.inspector.package_vulnerability_details.vendor.created_at
        - aws.inspector.inspector_score_details.adjusted_cvss.score.value
        - aws.inspector.inspector_score_details.adjusted_cvss.version
        - aws.inspector.title
      ignore_missing: true
  - script:
      tag: script_to_drop_null_values
      lang: painless
      description: This script processor iterates over the whole document to remove fields with null values.
      source: |-
        void handleMap(Map map) {
          map.values().removeIf(v -> {
            if (v instanceof Map) {
              handleMap(v);
            } else if (v instanceof List) {
              handleList(v);
            }
            return v == null || v == '' || (v instanceof Map && v.size() == 0) || (v instanceof List && v.size() == 0)
          });
        }
        void handleList(List list) {
          list.removeIf(v -> {
            if (v instanceof Map) {
              handleMap(v);
            } else if (v instanceof List) {
              handleList(v);
            }
            return v == null || v == '' || (v instanceof Map && v.size() == 0) || (v instanceof List && v.size() == 0)
          });
        }
        handleMap(ctx);
  - set:
      field: event.kind
      tag: set_pipeline_error_into_event_kind
      value: pipeline_error
      if: ctx.error?.message != null
  - append:
      field: tags
      value: preserve_original_event
      allow_duplicates: false
      if: ctx.error?.message != null
on_failure:
  - append:
      field: error.message
      value: |-
        Processor '{{{ _ingest.on_failure_processor_type }}}'
        {{{#_ingest.on_failure_processor_tag}}}with tag '{{{ _ingest.on_failure_processor_tag }}}'
        {{{/_ingest.on_failure_processor_tag}}}failed with message '{{{ _ingest.on_failure_message }}}'
  - set:
      field: event.kind
      tag: set_pipeline_error_to_event_kind
      value: pipeline_error
  - append:
      field: tags
      value: preserve_original_event
      allow_duplicates: false
